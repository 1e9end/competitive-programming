#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long

const int MAX_N = 1e5 + 1;
const ll MOD = 1e9 + 7;

void solve(){
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc;
    cin >> tc;
    for (int t = 1; t <= tc; ++t){
        // cout << "Case #" << t << ": ";
        solve();
    }
    return 0;
}

class DSU {
    private: 
        vector<int> parents;
        vector<int> sizes;
    public:
        DSU(int size) : parents(size), sizes(size, 1){
            for (int i = 0; i < size; i++){
                parents[i] = i;
            }
        }
        int find(int x){
            return (parents[x] == x ? x : (parents[x] = find(parents[x])));
        }
        bool unite(int a, int b){
            int parentA = find(a);
            int parentB = find(b);
            if (parentA == parentB){
                return false;
            }
            if (sizes[parentA] > sizes[parentB]){
                swap(parentA, parentB);
            }
            sizes[parentB] += sizes[parentA];
            parents[parentA] = parentB;
            return true;
        }
        bool connected(int a, int b){
            return find(a) == find(b);
        }
};

ll mod_exp(ll x, ll n, ll m) {
	x %= m;
	ll res = 1;
	while (n > 0) {
		if (n % 2 == 1) { res = res * x % m; }
		x = x * x % m;
		n /= 2;
	}
	return res;
}

vector<int> max_div[MAX_N + 1];
void prime_sieve() {
    for (int i = 2; i <= MAX_N; i++) {
        if (max_div[i] == 0) {
            for (int j = i; j <= MAX_N; j += i) { max_div[j] = i; }
        }
    }
}

vector<int> phi[MAX_N + 1];
void totient_sieve() {
	for (int i = 1; i < MAX_N; i++) { phi[i] = i; }
	for (int i = 2; i < MAX_N; i++) {
		// If i is prime
		if (phi[i] == i) {
			for (int j = i; j < MAX_N; j += i) { phi[j] -= phi[j] / i; }
		}
	}
}

vector<ll> fac[MAX_N + 1];
vector<ll> fac_inv[MAX_N + 1];
void factorial(ll p) {
	fac[0] = 1;
	for (int i = 1; i <= MAX_N; i++) { fac[i] = fac[i - 1] * i % p; }
}
void factorial_inverses(ll p) {
	fac_inv[MAX_N] = mod_exp(fac[MAX_N], p - 2, p);
	for (int i = MAX_N; i >= 1; i--) { fac_inv[i - 1] = fac_inv[i] * i % p; }
}
ll choose(ll n, ll r, ll p) {
	return fac[n] * fac_inv[r] % p * fac_inv[n - r] % p;
}

/** ALGORITHM: Modular Exponentiation 
 *  PURPOSE: Computes x^n (mod m)
 *  CONSTRAINT: m * m <= LLONG_MAX to prevent overflow
 *  TIME: O(log n)
*/
ll mod_exp(ll x, ll n, ll m) {
	x %= m;

	ll res = 1;
	while (n > 0) {
		if (n % 2 == 1) { res = res * x % m; }
		x = x * x % m;
		n /= 2;
	}

	return res;
}

/** DATASTRUCTURE: Floor Interval Array
 *  PURPOSE: Computes x^n (mod m)
 *  CONSTRAINT: m * m <= LLONG_MAX to prevent overflow
 *  TIME: O(log n)
*/
class FIArray {
    public:
        ll n;
        ll sqrtn;
		ll len;
        vector<ll> arr;
        vector<ll> keys;
    
        FIArray(ll num){
            n = num;
            sqrtn = sqrt(num);
            len = 2 * sqrtn;
            if (n/sqrtn == sqrtn){
                len--;
            }

            arr = vector<ll>(len);
            keys = vector<ll>(len);

            for (ll i = 1; i <= sqrtn; i++){
                keys[i - 1] = i;
            }

            for (ll i = 1; i <= sqrtn; i++){
                keys[len - i] = n/i;
            }
        }

        ll query(ll i){
            if (i <= sqrtn){
                return arr[i - 1];
            }

            return arr[len - n/i];
        }

        void set(ll i, ll x){
            if (i <= sqrtn){
                arr[i - 1] = x;
                return;
            }

            arr[len - n/i] = x;
        }
};

/** ALGORITHM: Dirichlet Hyperbola Method
 *  PURPOSE: Computes prefix sum of (f (*) g)
 *  CONSTRAINT: m * m <= LLONG_MAX to prevent overflow
 *  TIME: O(sqrt(n)) for O(1) individual prefix sums
*/
template<ll m> class DirichletProduct {
	public:
		ll f(ll n){
			return 1;
		}

		ll g(ll n){
			return 1;
		}

		FIVector sumf(ll n){
			return n;
		}

		FIVector sumg(ll n){
			return n;
		}

		ll hyperbola(long double c){
			ll k = pow((long double)n, c);
			ll l = pow((long double)n, 1 - c);

			FIVector computef = sumf(n);
			FIVector computeg = sumg(n);

			// cout << k << " " << l << endl;

			ll ans = 0;

			for (ll i = 1; i <= k; i++){
				ll c = f(i);
				c *= computeg.query(n/i);
				// c *= sumg(n/i);
				c %= m;

				ans += c;
				ans %= m;
			}

			for (ll i = 1; i <= l; i++){
				ll c = g(i);
				c *= computef.query(n/i);
				// c *= sumf(n/i);
				c %= m;

				ans += c;
				ans %= m;
			}

			ans += m - ((computef.query(k) * computeg.query(l)) % m);
			// ans += m - ((sumf(k) * sumg(l)) % m);

			return ans % m;
		}
};

- Mind local speed difference
- Submission size limit
- Print upon submission
- Compile:
g++ -O2 a.cpp -o a && ./a < file.in